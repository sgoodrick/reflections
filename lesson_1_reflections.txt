Version control looks like it is a bit of extra work, but it does provide some advantages such as easy differencing and being able to rollback changes.

How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Automating the comparison is much faster than doing it manually. Things like 1 or ! or l show up much easier for the computer and can me missed by the eye

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Being able to roll back changes to the last working version is always helpful and the diff function will help show what was done to break the code. If we know why the code broke, it is easier to fix

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The con to manual commits is that you have to remember to make the commit which requires a lot of discipline on the user's part. But an automated system would save many changes that were a trial and error part of coding. Most of these changes are meaningless.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

For code we want snapshots of all relevant files at each time to insure that we have working copies. If versions were file based it would get confusing.

How can you use the commands git log and git diff to view the history of files?

You really haven't told us about that yet.

How might using version control make you more confident to make changes that
could break something?

Being able to go back to a working version is always helpful.

Now that you have your workspace set up, what do you want to try using Git for?

I want to start using git for all of my coding work to avoid the trap of having multiple versions of code and not knowing which one is most recent.
